#!/usr/bin/python3
import argparse
import subprocess
from sys import exit

PIPE = subprocess.PIPE

def run(command, allowError=False):
    # Parses a string, runs as bash command, returns output (or throws exception if something went wrong)
    try:
        response = subprocess.run(command, stdout=PIPE, stderr=PIPE, shell=True)
    except FileNotFoundError:
        print(f'Error encountered running: {command}\nExecutable not found.')
        notifySendAvailable = not bool(subprocess.run(['which', 'notify-send'], stdout=PIPE).returncode)
        if notifySendAvailable:
            run('notify-send xsummon.log ExecutableNotFound')
        exit()

    if response.returncode > 0 and not allowError:
        errorLog = f"Command:{command}\n\
            Returncode:{response.returncode}\n\
            stdout:{response.stdout.decode('utf-8')}\n\
            stderr:{response.stderr.decode('utf-8')}"
        with open('xsummon.log', 'w') as file:
            file.write(errorLog)
            print(f'Error encountered running: {command}\n\
                    Details written to xsummon.log')

        notifySendAvailable = not bool(subprocess.run(['which', 'notify-send'], stdout=PIPE).returncode)
        if notifySendAvailable:
            run('notify-send xsummon.log UnexpectedError')
        exit()

    return response.stdout.decode('utf-8')


argparser = argparse.ArgumentParser(description='Call/hide a specific window.')
argparser.add_argument('program',
                       help='name of program')
argparser.add_argument('-a', '--args', default='',
                       help='passed to program if run by xsummon, example: xsummon firefox --args="--fullscreen" ')
argparser.add_argument('-g', '--go', action='store_true',
                       help="go to window's desktop instead of summoning it to the active desktop")
argparser.add_argument('-v', '--verbose', action='store_true')
args = argparser.parse_args()

candidatePIDs = run(f'pgrep {args.program}', allowError=True).split()
windowInfos = [line.split()[:3] for line in run('wmctrl -lp').split('\n') if line]  # windowid, desktop, pid

if args.verbose:
    print(f'Candidate PIDs for window process of {args.program}:\n', '\n'.join(candidatePIDs))

for windowID, windowDesktop, windowPID in windowInfos:
    if windowPID not in candidatePIDs:
        continue

    if args.verbose:
        print('PID match found:', windowPID, '\nwindowID:', windowID)

    windowID = int(windowID, 16)
    windowDesktop = int(windowDesktop)

    activeWindowID = run('xdotool getactivewindow', allowError=True)
    if activeWindowID:
        activeWindowID = int(activeWindowID)

    activeDesktop = int(run('xdotool get_desktop'))

    # main logic
    if activeDesktop == windowDesktop:
        if activeWindowID == windowID:
            run(f'xdotool windowminimize {windowID}')
        else:
            run(f'xdotool windowactivate {windowID}')
    else:
        if args.go:
            run(f'xdotool set_desktop {windowDesktop}')
        else:
            run(f'xdotool set_desktop_for_window {windowID} {activeDesktop}')
        run(f'xdotool windowactivate {windowID}')
    break
else:
    if args.verbose:
        print(f'Couldn\'t find a window found for {args.program}.')
    run(' '.join([args.program, args.args]))
