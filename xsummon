#!/usr/bin/python3
import argparse
from sys import exit
from subprocess import run, PIPE


argparser = argparse.ArgumentParser(description='Call/hide a specific window.')
argparser.add_argument('program',
                       help='name of program')
argparser.add_argument('-a', '--args', default='',
                       help='passed to program if run by xsummon, example: xsummon firefox --args="--fullscreen" ')
argparser.add_argument('-g', '--go', action='store_true',
                       help="go to window's desktop instead of summoning it to the active desktop")
argparser.add_argument('-m', '--mute', action='store_true',
                       help="mute notifications (if libnotify is present)")
argparser.add_argument('-v', '--verbose', action='store_true')
args = argparser.parse_args()

def notify(message):
    notifySendAvailable = not bool(run('which notify-send', stdout=PIPE, shell=True).returncode)
    if not args.mute and notifySendAvailable:
        shell('notify-send xsummon ' + message)

def shell(command, allowError=False):
    # runs as bash command and returns output (or notifies exception if something went wrong)
    try:
        response = run(command, stdout=PIPE, stderr=PIPE, shell=True)
    except FileNotFoundError:
        print(f'Error encountered running: {command}\nExecutable not found.')
        notify('ExecutableNotFound')
        exit(1)

    if response.returncode > 0 and not allowError:
        errorLog = (f'Command:{command}\n'
                    f'Returncode:{response.returncode}\n'
                    f'stdout:{response.stdout.decode("utf-8").strip()}\n'
                    f'stderr:{response.stderr.decode("utf-8").strip()}\n\n')
        with open('xsummon.log', 'a') as file:
            file.write(errorLog)
            print(f'Error encountered running: {command}\n'
                  'Details written to xsummon.log')

        notify('UnexpectedError')
        exit(2)

    return response.stdout.decode('utf-8')


candidatePIDs = shell(f'pgrep {args.program[:15]}', allowError=True).split()
windowInfos = [line.split()[:3] for line in shell('wmctrl -lp').split('\n') if line]  # windowid, desktop, pid

if args.verbose:
    if candidatePIDs:
        print(f'Candidate PIDs for window process of {args.program}:\n' + '\n'.join(candidatePIDs))
    else:
        print(f'No candidate PID found for window process "{args.program}".')

for windowID, windowDesktop, windowPID in windowInfos:
    if windowPID not in candidatePIDs:
        continue

    if args.verbose:
        print('PID match found:', windowPID, '\nwindowID:', windowID)

    windowID = int(windowID, 16)
    windowDesktop = int(windowDesktop)

    activeWindowID = shell('xdotool getactivewindow', allowError=True)
    if activeWindowID:
        activeWindowID = int(activeWindowID)

    activeDesktop = int(shell('xdotool get_desktop'))

    # main logic
    if activeDesktop == windowDesktop:
        if activeWindowID == windowID:
            shell(f'xdotool windowminimize {windowID}')
        else:
            shell(f'xdotool windowactivate {windowID}')
    else:
        if args.go:
            shell(f'xdotool set_desktop {windowDesktop}')
        else:
            shell(f'xdotool set_desktop_for_window {windowID} {activeDesktop}')
        shell(f'xdotool windowactivate {windowID}')
    break
else:
    # No window with associated process name {args.program}
    if args.verbose:
        print(f'Couldn\'t find a window for {args.program}.')
    shell(f'{args.program} {args.args}')
